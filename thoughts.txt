zrobic funkcje 

const handle = (arg) => () => {
    setColor(arg);
} 

// return selectedDays.reduce((obj: any, item) => (obj[item.day] = [item.color], obj), {}); //theSame
// return selectedDays.reduce((obj: any, item) => { obj[item.day] = [item.color]; return obj }, {}); //theSame

.reduce((obj, item) => (obj[item.day] = item.color, obj), {}) posiada
{} initial value ktory jest wartoscia poczatkowa accumulatora(obj)
wartosci sa dodawane do accumulatora(obj)
tyle i jest itemow w array tyle razy jest odpalana funkcja(iteruje wszystkie obiekty item)


//1 Jesli kolor jest zaznaczony to zwrocony obiekt jest posortowany i sa tylko wartosci red 
// let selectedDays = {
//   '1': '--red',
//   '2': '--red',
//   '4': '--red'
// }


//2 Jesli kolor nie jest zaznaczony to obliczana dla kazdego dnia jest dlugosc tablicy i dodawana klasa
// let selectedDays = {
//   '1': [
//     '--blue',
//   ],
//   '2': [
//     '--red',
//   ],
//   '4': [
//     '--red',
//     '--blue'
//   ]
// }
//day 1 className = tab[1].length


//JAK JEST WYBRANY KOLOR ZWRACANE SA Z BACKENDU TYLKO TE WARTOSCI DLA DANEGO KOLORU
//grida walnac

// Object.filter = (obj: any, predicate: any) =>
//   Object.keys(obj)
//     .filter(key => predicate(obj[key]))
//     .reduce((res: any, key) => (res[key] = obj[key], res), {});

// Object.filter = (obj: any, predicate: any) =>
//   Object.assign(...Object.keys(obj)
//     .filter(key => predicate(obj[key]))
//     .map(key => ({ [key]: obj[key] })));

// console.log(Object.entries(selectedDays));
// const result = selectedDays[0].slice(0, selectedDays[0].indexOf(',')); //wyciaga tylko 1 wartosc
// console.log(result);

// let months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

//zmienic kolorek w hover i focused czy selected na przycisku zeby nie pisac tego w js

// let selectedDays: LooseObject = { '1': '--blue --red', '13': '--yellow', '14': '--yellow', '5': '--blue' };
//kazdy miesiac ma tablice rowna ilosci dni i w tej tablicy sa zapisane kolory dla kazdego dnia
//let seletedDays = [{5: '--blue'}, {6: '--red'}, {6: '--blue}];


//DWA SPOSOY 
//1 
//TABLICA/
//generowane sa wszystkie dni miesiaca i zapelniane w pliku, do frontu wsylany jest tylko dany miesiac
// let selectedDays = [
//   { day: '1', color: '--blue' },
//   { day: '2', color: '--red' },
//   { day: '3', color: '' },
//   { day: '4', color: '--red --blue' }
// ] mozna tak przechowywac, ale trzeba parsowac tak stworzone obiekty

//lub

// let selectedDays = [ //wazna jest kolejnosc (po index wybierane po)
//   '--blue',
//   '--red',
//   '',
//   '--red --blue'
// ]

//2 
//OBIEKT lub mapa 
// let selectedDays = {
//   '1': '--blue',
//   '2': '--red',
//   '4': '--red --blue'
// }

// //3 OBIEKT
// let selectedDays = {
//   '1': [
//     '--blue',
//   ],
//   '2': [
//     '--red',
//   ],
//   '4': [
//     '--red',
//     '--blue'
//   ]
// }

//jak jest wybrany kolor to dane sa parsowane inaczej 
//jedne przypodzadkowuja kolory do tablicy i przenoszenia na klasy 
//drugi zlicza ilosc stringow w tablicy kolorow

ALGORYTMAMI SORTOWAC LISTE LUB JA ZAPISYWAC